// Generated by gencpp from file movement_msgs/WalkTestParametersSrvRequest.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_WALKTESTPARAMETERSSRVREQUEST_H
#define MOVEMENT_MSGS_MESSAGE_WALKTESTPARAMETERSSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct WalkTestParametersSrvRequest_
{
  typedef WalkTestParametersSrvRequest_<ContainerAllocator> Type;

  WalkTestParametersSrvRequest_()
    : currentWalk()
    , stepGain(0.0)
    , lateralGain(0.0)
    , turnGain(0.0)
    , freq(0.0)
    , supportPhaseRatio(0.0)
    , footYOffset(0.0)
    , riseGain(0.0)
    , trunkZOffset(0.0)
    , swingGain(0.0)
    , swingRollGain(0.0)
    , swingPhase(0.0)
    , stepUpVel(0.0)
    , stepDownVel(0.0)
    , riseUpVel(0.0)
    , riseDownVel(0.0)
    , swingPause(0.0)
    , swingVel(0.0)
    , trunkXOffset(0.0)
    , trunkYOffset(0.0)
    , trunkPitch(0.0)
    , trunkRoll(0.0)
    , extraLeftX(0.0)
    , extraLeftY(0.0)
    , extraLeftZ(0.0)
    , extraRightX(0.0)
    , extraRightY(0.0)
    , extraRightZ(0.0)
    , extraLeftYaw(0.0)
    , extraLeftPitch(0.0)
    , extraLeftRoll(0.0)
    , extraRightYaw(0.0)
    , extraRightPitch(0.0)
    , extraRightRoll(0.0)  {
    }
  WalkTestParametersSrvRequest_(const ContainerAllocator& _alloc)
    : currentWalk(_alloc)
    , stepGain(0.0)
    , lateralGain(0.0)
    , turnGain(0.0)
    , freq(0.0)
    , supportPhaseRatio(0.0)
    , footYOffset(0.0)
    , riseGain(0.0)
    , trunkZOffset(0.0)
    , swingGain(0.0)
    , swingRollGain(0.0)
    , swingPhase(0.0)
    , stepUpVel(0.0)
    , stepDownVel(0.0)
    , riseUpVel(0.0)
    , riseDownVel(0.0)
    , swingPause(0.0)
    , swingVel(0.0)
    , trunkXOffset(0.0)
    , trunkYOffset(0.0)
    , trunkPitch(0.0)
    , trunkRoll(0.0)
    , extraLeftX(0.0)
    , extraLeftY(0.0)
    , extraLeftZ(0.0)
    , extraRightX(0.0)
    , extraRightY(0.0)
    , extraRightZ(0.0)
    , extraLeftYaw(0.0)
    , extraLeftPitch(0.0)
    , extraLeftRoll(0.0)
    , extraRightYaw(0.0)
    , extraRightPitch(0.0)
    , extraRightRoll(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _currentWalk_type;
  _currentWalk_type currentWalk;

   typedef double _stepGain_type;
  _stepGain_type stepGain;

   typedef double _lateralGain_type;
  _lateralGain_type lateralGain;

   typedef double _turnGain_type;
  _turnGain_type turnGain;

   typedef double _freq_type;
  _freq_type freq;

   typedef double _supportPhaseRatio_type;
  _supportPhaseRatio_type supportPhaseRatio;

   typedef double _footYOffset_type;
  _footYOffset_type footYOffset;

   typedef double _riseGain_type;
  _riseGain_type riseGain;

   typedef double _trunkZOffset_type;
  _trunkZOffset_type trunkZOffset;

   typedef double _swingGain_type;
  _swingGain_type swingGain;

   typedef double _swingRollGain_type;
  _swingRollGain_type swingRollGain;

   typedef double _swingPhase_type;
  _swingPhase_type swingPhase;

   typedef double _stepUpVel_type;
  _stepUpVel_type stepUpVel;

   typedef double _stepDownVel_type;
  _stepDownVel_type stepDownVel;

   typedef double _riseUpVel_type;
  _riseUpVel_type riseUpVel;

   typedef double _riseDownVel_type;
  _riseDownVel_type riseDownVel;

   typedef double _swingPause_type;
  _swingPause_type swingPause;

   typedef double _swingVel_type;
  _swingVel_type swingVel;

   typedef double _trunkXOffset_type;
  _trunkXOffset_type trunkXOffset;

   typedef double _trunkYOffset_type;
  _trunkYOffset_type trunkYOffset;

   typedef double _trunkPitch_type;
  _trunkPitch_type trunkPitch;

   typedef double _trunkRoll_type;
  _trunkRoll_type trunkRoll;

   typedef double _extraLeftX_type;
  _extraLeftX_type extraLeftX;

   typedef double _extraLeftY_type;
  _extraLeftY_type extraLeftY;

   typedef double _extraLeftZ_type;
  _extraLeftZ_type extraLeftZ;

   typedef double _extraRightX_type;
  _extraRightX_type extraRightX;

   typedef double _extraRightY_type;
  _extraRightY_type extraRightY;

   typedef double _extraRightZ_type;
  _extraRightZ_type extraRightZ;

   typedef double _extraLeftYaw_type;
  _extraLeftYaw_type extraLeftYaw;

   typedef double _extraLeftPitch_type;
  _extraLeftPitch_type extraLeftPitch;

   typedef double _extraLeftRoll_type;
  _extraLeftRoll_type extraLeftRoll;

   typedef double _extraRightYaw_type;
  _extraRightYaw_type extraRightYaw;

   typedef double _extraRightPitch_type;
  _extraRightPitch_type extraRightPitch;

   typedef double _extraRightRoll_type;
  _extraRightRoll_type extraRightRoll;





  typedef boost::shared_ptr< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WalkTestParametersSrvRequest_

typedef ::movement_msgs::WalkTestParametersSrvRequest_<std::allocator<void> > WalkTestParametersSrvRequest;

typedef boost::shared_ptr< ::movement_msgs::WalkTestParametersSrvRequest > WalkTestParametersSrvRequestPtr;
typedef boost::shared_ptr< ::movement_msgs::WalkTestParametersSrvRequest const> WalkTestParametersSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.currentWalk == rhs.currentWalk &&
    lhs.stepGain == rhs.stepGain &&
    lhs.lateralGain == rhs.lateralGain &&
    lhs.turnGain == rhs.turnGain &&
    lhs.freq == rhs.freq &&
    lhs.supportPhaseRatio == rhs.supportPhaseRatio &&
    lhs.footYOffset == rhs.footYOffset &&
    lhs.riseGain == rhs.riseGain &&
    lhs.trunkZOffset == rhs.trunkZOffset &&
    lhs.swingGain == rhs.swingGain &&
    lhs.swingRollGain == rhs.swingRollGain &&
    lhs.swingPhase == rhs.swingPhase &&
    lhs.stepUpVel == rhs.stepUpVel &&
    lhs.stepDownVel == rhs.stepDownVel &&
    lhs.riseUpVel == rhs.riseUpVel &&
    lhs.riseDownVel == rhs.riseDownVel &&
    lhs.swingPause == rhs.swingPause &&
    lhs.swingVel == rhs.swingVel &&
    lhs.trunkXOffset == rhs.trunkXOffset &&
    lhs.trunkYOffset == rhs.trunkYOffset &&
    lhs.trunkPitch == rhs.trunkPitch &&
    lhs.trunkRoll == rhs.trunkRoll &&
    lhs.extraLeftX == rhs.extraLeftX &&
    lhs.extraLeftY == rhs.extraLeftY &&
    lhs.extraLeftZ == rhs.extraLeftZ &&
    lhs.extraRightX == rhs.extraRightX &&
    lhs.extraRightY == rhs.extraRightY &&
    lhs.extraRightZ == rhs.extraRightZ &&
    lhs.extraLeftYaw == rhs.extraLeftYaw &&
    lhs.extraLeftPitch == rhs.extraLeftPitch &&
    lhs.extraLeftRoll == rhs.extraLeftRoll &&
    lhs.extraRightYaw == rhs.extraRightYaw &&
    lhs.extraRightPitch == rhs.extraRightPitch &&
    lhs.extraRightRoll == rhs.extraRightRoll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35347b8ea32e09af44278723d78435c9";
  }

  static const char* value(const ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35347b8ea32e09afULL;
  static const uint64_t static_value2 = 0x44278723d78435c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/WalkTestParametersSrvRequest";
  }

  static const char* value(const ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string currentWalk\n"
"float64 stepGain\n"
"float64 lateralGain\n"
"float64 turnGain\n"
"float64 freq\n"
"float64 supportPhaseRatio\n"
"float64 footYOffset\n"
"float64 riseGain\n"
"float64 trunkZOffset\n"
"float64 swingGain\n"
"float64 swingRollGain\n"
"float64 swingPhase\n"
"float64 stepUpVel\n"
"float64 stepDownVel\n"
"float64 riseUpVel\n"
"float64 riseDownVel\n"
"float64 swingPause\n"
"float64 swingVel\n"
"float64 trunkXOffset\n"
"float64 trunkYOffset\n"
"float64 trunkPitch\n"
"float64 trunkRoll\n"
"float64 extraLeftX\n"
"float64 extraLeftY\n"
"float64 extraLeftZ\n"
"float64 extraRightX\n"
"float64 extraRightY\n"
"float64 extraRightZ\n"
"float64 extraLeftYaw\n"
"float64 extraLeftPitch\n"
"float64 extraLeftRoll\n"
"float64 extraRightYaw\n"
"float64 extraRightPitch\n"
"float64 extraRightRoll\n"
"\n"
;
  }

  static const char* value(const ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.currentWalk);
      stream.next(m.stepGain);
      stream.next(m.lateralGain);
      stream.next(m.turnGain);
      stream.next(m.freq);
      stream.next(m.supportPhaseRatio);
      stream.next(m.footYOffset);
      stream.next(m.riseGain);
      stream.next(m.trunkZOffset);
      stream.next(m.swingGain);
      stream.next(m.swingRollGain);
      stream.next(m.swingPhase);
      stream.next(m.stepUpVel);
      stream.next(m.stepDownVel);
      stream.next(m.riseUpVel);
      stream.next(m.riseDownVel);
      stream.next(m.swingPause);
      stream.next(m.swingVel);
      stream.next(m.trunkXOffset);
      stream.next(m.trunkYOffset);
      stream.next(m.trunkPitch);
      stream.next(m.trunkRoll);
      stream.next(m.extraLeftX);
      stream.next(m.extraLeftY);
      stream.next(m.extraLeftZ);
      stream.next(m.extraRightX);
      stream.next(m.extraRightY);
      stream.next(m.extraRightZ);
      stream.next(m.extraLeftYaw);
      stream.next(m.extraLeftPitch);
      stream.next(m.extraLeftRoll);
      stream.next(m.extraRightYaw);
      stream.next(m.extraRightPitch);
      stream.next(m.extraRightRoll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkTestParametersSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::WalkTestParametersSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "currentWalk: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.currentWalk);
    s << indent << "stepGain: ";
    Printer<double>::stream(s, indent + "  ", v.stepGain);
    s << indent << "lateralGain: ";
    Printer<double>::stream(s, indent + "  ", v.lateralGain);
    s << indent << "turnGain: ";
    Printer<double>::stream(s, indent + "  ", v.turnGain);
    s << indent << "freq: ";
    Printer<double>::stream(s, indent + "  ", v.freq);
    s << indent << "supportPhaseRatio: ";
    Printer<double>::stream(s, indent + "  ", v.supportPhaseRatio);
    s << indent << "footYOffset: ";
    Printer<double>::stream(s, indent + "  ", v.footYOffset);
    s << indent << "riseGain: ";
    Printer<double>::stream(s, indent + "  ", v.riseGain);
    s << indent << "trunkZOffset: ";
    Printer<double>::stream(s, indent + "  ", v.trunkZOffset);
    s << indent << "swingGain: ";
    Printer<double>::stream(s, indent + "  ", v.swingGain);
    s << indent << "swingRollGain: ";
    Printer<double>::stream(s, indent + "  ", v.swingRollGain);
    s << indent << "swingPhase: ";
    Printer<double>::stream(s, indent + "  ", v.swingPhase);
    s << indent << "stepUpVel: ";
    Printer<double>::stream(s, indent + "  ", v.stepUpVel);
    s << indent << "stepDownVel: ";
    Printer<double>::stream(s, indent + "  ", v.stepDownVel);
    s << indent << "riseUpVel: ";
    Printer<double>::stream(s, indent + "  ", v.riseUpVel);
    s << indent << "riseDownVel: ";
    Printer<double>::stream(s, indent + "  ", v.riseDownVel);
    s << indent << "swingPause: ";
    Printer<double>::stream(s, indent + "  ", v.swingPause);
    s << indent << "swingVel: ";
    Printer<double>::stream(s, indent + "  ", v.swingVel);
    s << indent << "trunkXOffset: ";
    Printer<double>::stream(s, indent + "  ", v.trunkXOffset);
    s << indent << "trunkYOffset: ";
    Printer<double>::stream(s, indent + "  ", v.trunkYOffset);
    s << indent << "trunkPitch: ";
    Printer<double>::stream(s, indent + "  ", v.trunkPitch);
    s << indent << "trunkRoll: ";
    Printer<double>::stream(s, indent + "  ", v.trunkRoll);
    s << indent << "extraLeftX: ";
    Printer<double>::stream(s, indent + "  ", v.extraLeftX);
    s << indent << "extraLeftY: ";
    Printer<double>::stream(s, indent + "  ", v.extraLeftY);
    s << indent << "extraLeftZ: ";
    Printer<double>::stream(s, indent + "  ", v.extraLeftZ);
    s << indent << "extraRightX: ";
    Printer<double>::stream(s, indent + "  ", v.extraRightX);
    s << indent << "extraRightY: ";
    Printer<double>::stream(s, indent + "  ", v.extraRightY);
    s << indent << "extraRightZ: ";
    Printer<double>::stream(s, indent + "  ", v.extraRightZ);
    s << indent << "extraLeftYaw: ";
    Printer<double>::stream(s, indent + "  ", v.extraLeftYaw);
    s << indent << "extraLeftPitch: ";
    Printer<double>::stream(s, indent + "  ", v.extraLeftPitch);
    s << indent << "extraLeftRoll: ";
    Printer<double>::stream(s, indent + "  ", v.extraLeftRoll);
    s << indent << "extraRightYaw: ";
    Printer<double>::stream(s, indent + "  ", v.extraRightYaw);
    s << indent << "extraRightPitch: ";
    Printer<double>::stream(s, indent + "  ", v.extraRightPitch);
    s << indent << "extraRightRoll: ";
    Printer<double>::stream(s, indent + "  ", v.extraRightRoll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_WALKTESTPARAMETERSSRVREQUEST_H
