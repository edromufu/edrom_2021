// Generated by gencpp from file movement_msgs/WalkCreatorRequestSrvRequest.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_WALKCREATORREQUESTSRVREQUEST_H
#define MOVEMENT_MSGS_MESSAGE_WALKCREATORREQUESTSRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct WalkCreatorRequestSrvRequest_
{
  typedef WalkCreatorRequestSrvRequest_<ContainerAllocator> Type;

  WalkCreatorRequestSrvRequest_()
    : enabledGain(0)
    , stepGain(0.0)
    , lateralGain(0.0)
    , turnGain(0.0)  {
    }
  WalkCreatorRequestSrvRequest_(const ContainerAllocator& _alloc)
    : enabledGain(0)
    , stepGain(0.0)
    , lateralGain(0.0)
    , turnGain(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _enabledGain_type;
  _enabledGain_type enabledGain;

   typedef float _stepGain_type;
  _stepGain_type stepGain;

   typedef float _lateralGain_type;
  _lateralGain_type lateralGain;

   typedef float _turnGain_type;
  _turnGain_type turnGain;





  typedef boost::shared_ptr< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WalkCreatorRequestSrvRequest_

typedef ::movement_msgs::WalkCreatorRequestSrvRequest_<std::allocator<void> > WalkCreatorRequestSrvRequest;

typedef boost::shared_ptr< ::movement_msgs::WalkCreatorRequestSrvRequest > WalkCreatorRequestSrvRequestPtr;
typedef boost::shared_ptr< ::movement_msgs::WalkCreatorRequestSrvRequest const> WalkCreatorRequestSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.enabledGain == rhs.enabledGain &&
    lhs.stepGain == rhs.stepGain &&
    lhs.lateralGain == rhs.lateralGain &&
    lhs.turnGain == rhs.turnGain;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66ee05dd20ea77a2d2a46b908512c7e4";
  }

  static const char* value(const ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66ee05dd20ea77a2ULL;
  static const uint64_t static_value2 = 0xd2a46b908512c7e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/WalkCreatorRequestSrvRequest";
  }

  static const char* value(const ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   enabledGain\n"
"float32 stepGain\n"
"float32 lateralGain\n"
"float32 turnGain\n"
;
  }

  static const char* value(const ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enabledGain);
      stream.next(m.stepGain);
      stream.next(m.lateralGain);
      stream.next(m.turnGain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkCreatorRequestSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::WalkCreatorRequestSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "enabledGain: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enabledGain);
    s << indent << "stepGain: ";
    Printer<float>::stream(s, indent + "  ", v.stepGain);
    s << indent << "lateralGain: ";
    Printer<float>::stream(s, indent + "  ", v.lateralGain);
    s << indent << "turnGain: ";
    Printer<float>::stream(s, indent + "  ", v.turnGain);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_WALKCREATORREQUESTSRVREQUEST_H
