// Generated by gencpp from file vision_msgs/Webotsmsg.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_WEBOTSMSG_H
#define VISION_MSGS_MESSAGE_WEBOTSMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vision_msgs/Ball.h>
#include <vision_msgs/Leftgoalpost.h>
#include <vision_msgs/Rightgoalpost.h>

namespace vision_msgs
{
template <class ContainerAllocator>
struct Webotsmsg_
{
  typedef Webotsmsg_<ContainerAllocator> Type;

  Webotsmsg_()
    : searching(false)
    , fps(0)
    , ball()
    , leftgoalpost()
    , rightgoalpost()  {
    }
  Webotsmsg_(const ContainerAllocator& _alloc)
    : searching(false)
    , fps(0)
    , ball(_alloc)
    , leftgoalpost(_alloc)
    , rightgoalpost(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _searching_type;
  _searching_type searching;

   typedef uint8_t _fps_type;
  _fps_type fps;

   typedef  ::vision_msgs::Ball_<ContainerAllocator>  _ball_type;
  _ball_type ball;

   typedef  ::vision_msgs::Leftgoalpost_<ContainerAllocator>  _leftgoalpost_type;
  _leftgoalpost_type leftgoalpost;

   typedef  ::vision_msgs::Rightgoalpost_<ContainerAllocator>  _rightgoalpost_type;
  _rightgoalpost_type rightgoalpost;





  typedef boost::shared_ptr< ::vision_msgs::Webotsmsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::Webotsmsg_<ContainerAllocator> const> ConstPtr;

}; // struct Webotsmsg_

typedef ::vision_msgs::Webotsmsg_<std::allocator<void> > Webotsmsg;

typedef boost::shared_ptr< ::vision_msgs::Webotsmsg > WebotsmsgPtr;
typedef boost::shared_ptr< ::vision_msgs::Webotsmsg const> WebotsmsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::Webotsmsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::Webotsmsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_msgs::Webotsmsg_<ContainerAllocator1> & lhs, const ::vision_msgs::Webotsmsg_<ContainerAllocator2> & rhs)
{
  return lhs.searching == rhs.searching &&
    lhs.fps == rhs.fps &&
    lhs.ball == rhs.ball &&
    lhs.leftgoalpost == rhs.leftgoalpost &&
    lhs.rightgoalpost == rhs.rightgoalpost;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_msgs::Webotsmsg_<ContainerAllocator1> & lhs, const ::vision_msgs::Webotsmsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Webotsmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Webotsmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Webotsmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Webotsmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Webotsmsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Webotsmsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::Webotsmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b9c0baf80135ab319a9a2d5f79a6c9a";
  }

  static const char* value(const ::vision_msgs::Webotsmsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b9c0baf80135ab3ULL;
  static const uint64_t static_value2 = 0x19a9a2d5f79a6c9aULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::Webotsmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/Webotsmsg";
  }

  static const char* value(const ::vision_msgs::Webotsmsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::Webotsmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool searching\n"
"uint8 fps\n"
"vision_msgs/Ball ball\n"
"vision_msgs/Leftgoalpost leftgoalpost\n"
"vision_msgs/Rightgoalpost rightgoalpost\n"
"================================================================================\n"
"MSG: vision_msgs/Ball\n"
"bool found\n"
"int32 x\n"
"int32 y\n"
"int32 roi_width\n"
"int32 roi_height\n"
"================================================================================\n"
"MSG: vision_msgs/Leftgoalpost\n"
"bool found\n"
"int32 x\n"
"int32 y\n"
"int32 roi_width\n"
"int32 roi_height\n"
"\n"
"================================================================================\n"
"MSG: vision_msgs/Rightgoalpost\n"
"bool found\n"
"int32 x\n"
"int32 y\n"
"int32 roi_width\n"
"int32 roi_height\n"
;
  }

  static const char* value(const ::vision_msgs::Webotsmsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::Webotsmsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.searching);
      stream.next(m.fps);
      stream.next(m.ball);
      stream.next(m.leftgoalpost);
      stream.next(m.rightgoalpost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Webotsmsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::Webotsmsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::Webotsmsg_<ContainerAllocator>& v)
  {
    s << indent << "searching: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.searching);
    s << indent << "fps: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fps);
    s << indent << "ball: ";
    s << std::endl;
    Printer< ::vision_msgs::Ball_<ContainerAllocator> >::stream(s, indent + "  ", v.ball);
    s << indent << "leftgoalpost: ";
    s << std::endl;
    Printer< ::vision_msgs::Leftgoalpost_<ContainerAllocator> >::stream(s, indent + "  ", v.leftgoalpost);
    s << indent << "rightgoalpost: ";
    s << std::endl;
    Printer< ::vision_msgs::Rightgoalpost_<ContainerAllocator> >::stream(s, indent + "  ", v.rightgoalpost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_WEBOTSMSG_H
