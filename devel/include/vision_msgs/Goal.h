// Generated by gencpp from file vision_msgs/Goal.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_GOAL_H
#define VISION_MSGS_MESSAGE_GOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_msgs
{
template <class ContainerAllocator>
struct Goal_
{
  typedef Goal_<ContainerAllocator> Type;

  Goal_()
    : found(false)
    , x(0)
    , y(0)  {
    }
  Goal_(const ContainerAllocator& _alloc)
    : found(false)
    , x(0)
    , y(0)  {
  (void)_alloc;
    }



   typedef uint8_t _found_type;
  _found_type found;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::vision_msgs::Goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::Goal_<ContainerAllocator> const> ConstPtr;

}; // struct Goal_

typedef ::vision_msgs::Goal_<std::allocator<void> > Goal;

typedef boost::shared_ptr< ::vision_msgs::Goal > GoalPtr;
typedef boost::shared_ptr< ::vision_msgs::Goal const> GoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::Goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::Goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_msgs::Goal_<ContainerAllocator1> & lhs, const ::vision_msgs::Goal_<ContainerAllocator2> & rhs)
{
  return lhs.found == rhs.found &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_msgs::Goal_<ContainerAllocator1> & lhs, const ::vision_msgs::Goal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ecc742cf8f7a902df729f553275ba64";
  }

  static const char* value(const ::vision_msgs::Goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ecc742cf8f7a902ULL;
  static const uint64_t static_value2 = 0xdf729f553275ba64ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/Goal";
  }

  static const char* value(const ::vision_msgs::Goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool found\n"
"int32 x\n"
"int32 y\n"
;
  }

  static const char* value(const ::vision_msgs::Goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::Goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.found);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::Goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::Goal_<ContainerAllocator>& v)
  {
    s << indent << "found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.found);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_GOAL_H
