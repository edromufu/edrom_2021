// Generated by gencpp from file modularized_bhv_msgs/stateMachineMsg.msg
// DO NOT EDIT!


#ifndef MODULARIZED_BHV_MSGS_MESSAGE_STATEMACHINEMSG_H
#define MODULARIZED_BHV_MSGS_MESSAGE_STATEMACHINEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace modularized_bhv_msgs
{
template <class ContainerAllocator>
struct stateMachineMsg_
{
  typedef stateMachineMsg_<ContainerAllocator> Type;

  stateMachineMsg_()
    : fallState()
    , ballFound(false)
    , ballClose(false)
    , ballRelativePosition()
    , verAngleAccomplished(false)
    , headPossibleMovements()
    , horMotorOutOfCenter(false)
    , horMotorPosition(0.0)  {
    }
  stateMachineMsg_(const ContainerAllocator& _alloc)
    : fallState(_alloc)
    , ballFound(false)
    , ballClose(false)
    , ballRelativePosition(_alloc)
    , verAngleAccomplished(false)
    , headPossibleMovements(_alloc)
    , horMotorOutOfCenter(false)
    , horMotorPosition(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _fallState_type;
  _fallState_type fallState;

   typedef uint8_t _ballFound_type;
  _ballFound_type ballFound;

   typedef uint8_t _ballClose_type;
  _ballClose_type ballClose;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ballRelativePosition_type;
  _ballRelativePosition_type ballRelativePosition;

   typedef uint8_t _verAngleAccomplished_type;
  _verAngleAccomplished_type verAngleAccomplished;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _headPossibleMovements_type;
  _headPossibleMovements_type headPossibleMovements;

   typedef uint8_t _horMotorOutOfCenter_type;
  _horMotorOutOfCenter_type horMotorOutOfCenter;

   typedef float _horMotorPosition_type;
  _horMotorPosition_type horMotorPosition;





  typedef boost::shared_ptr< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> const> ConstPtr;

}; // struct stateMachineMsg_

typedef ::modularized_bhv_msgs::stateMachineMsg_<std::allocator<void> > stateMachineMsg;

typedef boost::shared_ptr< ::modularized_bhv_msgs::stateMachineMsg > stateMachineMsgPtr;
typedef boost::shared_ptr< ::modularized_bhv_msgs::stateMachineMsg const> stateMachineMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator1> & lhs, const ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator2> & rhs)
{
  return lhs.fallState == rhs.fallState &&
    lhs.ballFound == rhs.ballFound &&
    lhs.ballClose == rhs.ballClose &&
    lhs.ballRelativePosition == rhs.ballRelativePosition &&
    lhs.verAngleAccomplished == rhs.verAngleAccomplished &&
    lhs.headPossibleMovements == rhs.headPossibleMovements &&
    lhs.horMotorOutOfCenter == rhs.horMotorOutOfCenter &&
    lhs.horMotorPosition == rhs.horMotorPosition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator1> & lhs, const ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace modularized_bhv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fef8165d0297ca5e6f3b8c591ed6dfff";
  }

  static const char* value(const ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfef8165d0297ca5eULL;
  static const uint64_t static_value2 = 0x6f3b8c591ed6dfffULL;
};

template<class ContainerAllocator>
struct DataType< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "modularized_bhv_msgs/stateMachineMsg";
  }

  static const char* value(const ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string fallState\n"
"bool ballFound\n"
"bool ballClose\n"
"string ballRelativePosition\n"
"bool verAngleAccomplished\n"
"string[] headPossibleMovements\n"
"bool horMotorOutOfCenter\n"
"float32 horMotorPosition\n"
;
  }

  static const char* value(const ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fallState);
      stream.next(m.ballFound);
      stream.next(m.ballClose);
      stream.next(m.ballRelativePosition);
      stream.next(m.verAngleAccomplished);
      stream.next(m.headPossibleMovements);
      stream.next(m.horMotorOutOfCenter);
      stream.next(m.horMotorPosition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct stateMachineMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::modularized_bhv_msgs::stateMachineMsg_<ContainerAllocator>& v)
  {
    s << indent << "fallState: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.fallState);
    s << indent << "ballFound: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ballFound);
    s << indent << "ballClose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ballClose);
    s << indent << "ballRelativePosition: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ballRelativePosition);
    s << indent << "verAngleAccomplished: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.verAngleAccomplished);
    s << indent << "headPossibleMovements[]" << std::endl;
    for (size_t i = 0; i < v.headPossibleMovements.size(); ++i)
    {
      s << indent << "  headPossibleMovements[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.headPossibleMovements[i]);
    }
    s << indent << "horMotorOutOfCenter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horMotorOutOfCenter);
    s << indent << "horMotorPosition: ";
    Printer<float>::stream(s, indent + "  ", v.horMotorPosition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODULARIZED_BHV_MSGS_MESSAGE_STATEMACHINEMSG_H
