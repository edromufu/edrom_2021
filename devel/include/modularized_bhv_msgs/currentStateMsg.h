// Generated by gencpp from file modularized_bhv_msgs/currentStateMsg.msg
// DO NOT EDIT!


#ifndef MODULARIZED_BHV_MSGS_MESSAGE_CURRENTSTATEMSG_H
#define MODULARIZED_BHV_MSGS_MESSAGE_CURRENTSTATEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace modularized_bhv_msgs
{
template <class ContainerAllocator>
struct currentStateMsg_
{
  typedef currentStateMsg_<ContainerAllocator> Type;

  currentStateMsg_()
    : currentState()  {
    }
  currentStateMsg_(const ContainerAllocator& _alloc)
    : currentState(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _currentState_type;
  _currentState_type currentState;





  typedef boost::shared_ptr< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> const> ConstPtr;

}; // struct currentStateMsg_

typedef ::modularized_bhv_msgs::currentStateMsg_<std::allocator<void> > currentStateMsg;

typedef boost::shared_ptr< ::modularized_bhv_msgs::currentStateMsg > currentStateMsgPtr;
typedef boost::shared_ptr< ::modularized_bhv_msgs::currentStateMsg const> currentStateMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator1> & lhs, const ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator2> & rhs)
{
  return lhs.currentState == rhs.currentState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator1> & lhs, const ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace modularized_bhv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51b88f6d6df0913c6465fdbbb69a8c4e";
  }

  static const char* value(const ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51b88f6d6df0913cULL;
  static const uint64_t static_value2 = 0x6465fdbbb69a8c4eULL;
};

template<class ContainerAllocator>
struct DataType< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "modularized_bhv_msgs/currentStateMsg";
  }

  static const char* value(const ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string currentState\n"
;
  }

  static const char* value(const ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.currentState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct currentStateMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::modularized_bhv_msgs::currentStateMsg_<ContainerAllocator>& v)
  {
    s << indent << "currentState: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.currentState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODULARIZED_BHV_MSGS_MESSAGE_CURRENTSTATEMSG_H
