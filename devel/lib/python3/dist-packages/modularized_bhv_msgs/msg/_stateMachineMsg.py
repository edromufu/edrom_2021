# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from modularized_bhv_msgs/stateMachineMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class stateMachineMsg(genpy.Message):
  _md5sum = "fef8165d0297ca5e6f3b8c591ed6dfff"
  _type = "modularized_bhv_msgs/stateMachineMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string fallState
bool ballFound
bool ballClose
string ballRelativePosition
bool verAngleAccomplished
string[] headPossibleMovements
bool horMotorOutOfCenter
float32 horMotorPosition"""
  __slots__ = ['fallState','ballFound','ballClose','ballRelativePosition','verAngleAccomplished','headPossibleMovements','horMotorOutOfCenter','horMotorPosition']
  _slot_types = ['string','bool','bool','string','bool','string[]','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fallState,ballFound,ballClose,ballRelativePosition,verAngleAccomplished,headPossibleMovements,horMotorOutOfCenter,horMotorPosition

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(stateMachineMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fallState is None:
        self.fallState = ''
      if self.ballFound is None:
        self.ballFound = False
      if self.ballClose is None:
        self.ballClose = False
      if self.ballRelativePosition is None:
        self.ballRelativePosition = ''
      if self.verAngleAccomplished is None:
        self.verAngleAccomplished = False
      if self.headPossibleMovements is None:
        self.headPossibleMovements = []
      if self.horMotorOutOfCenter is None:
        self.horMotorOutOfCenter = False
      if self.horMotorPosition is None:
        self.horMotorPosition = 0.
    else:
      self.fallState = ''
      self.ballFound = False
      self.ballClose = False
      self.ballRelativePosition = ''
      self.verAngleAccomplished = False
      self.headPossibleMovements = []
      self.horMotorOutOfCenter = False
      self.horMotorPosition = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.fallState
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.ballFound, _x.ballClose))
      _x = self.ballRelativePosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.verAngleAccomplished
      buff.write(_get_struct_B().pack(_x))
      length = len(self.headPossibleMovements)
      buff.write(_struct_I.pack(length))
      for val1 in self.headPossibleMovements:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_Bf().pack(_x.horMotorOutOfCenter, _x.horMotorPosition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fallState = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fallState = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.ballFound, _x.ballClose,) = _get_struct_2B().unpack(str[start:end])
      self.ballFound = bool(self.ballFound)
      self.ballClose = bool(self.ballClose)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ballRelativePosition = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ballRelativePosition = str[start:end]
      start = end
      end += 1
      (self.verAngleAccomplished,) = _get_struct_B().unpack(str[start:end])
      self.verAngleAccomplished = bool(self.verAngleAccomplished)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.headPossibleMovements = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.headPossibleMovements.append(val1)
      _x = self
      start = end
      end += 5
      (_x.horMotorOutOfCenter, _x.horMotorPosition,) = _get_struct_Bf().unpack(str[start:end])
      self.horMotorOutOfCenter = bool(self.horMotorOutOfCenter)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.fallState
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.ballFound, _x.ballClose))
      _x = self.ballRelativePosition
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.verAngleAccomplished
      buff.write(_get_struct_B().pack(_x))
      length = len(self.headPossibleMovements)
      buff.write(_struct_I.pack(length))
      for val1 in self.headPossibleMovements:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_Bf().pack(_x.horMotorOutOfCenter, _x.horMotorPosition))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fallState = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fallState = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.ballFound, _x.ballClose,) = _get_struct_2B().unpack(str[start:end])
      self.ballFound = bool(self.ballFound)
      self.ballClose = bool(self.ballClose)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ballRelativePosition = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ballRelativePosition = str[start:end]
      start = end
      end += 1
      (self.verAngleAccomplished,) = _get_struct_B().unpack(str[start:end])
      self.verAngleAccomplished = bool(self.verAngleAccomplished)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.headPossibleMovements = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.headPossibleMovements.append(val1)
      _x = self
      start = end
      end += 5
      (_x.horMotorOutOfCenter, _x.horMotorPosition,) = _get_struct_Bf().unpack(str[start:end])
      self.horMotorOutOfCenter = bool(self.horMotorOutOfCenter)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
