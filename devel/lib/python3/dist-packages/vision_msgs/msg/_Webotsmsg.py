# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision_msgs/Webotsmsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vision_msgs.msg

class Webotsmsg(genpy.Message):
  _md5sum = "2b9c0baf80135ab319a9a2d5f79a6c9a"
  _type = "vision_msgs/Webotsmsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool searching
uint8 fps
vision_msgs/Ball ball
vision_msgs/Leftgoalpost leftgoalpost
vision_msgs/Rightgoalpost rightgoalpost
================================================================================
MSG: vision_msgs/Ball
bool found
int32 x
int32 y
int32 roi_width
int32 roi_height
================================================================================
MSG: vision_msgs/Leftgoalpost
bool found
int32 x
int32 y
int32 roi_width
int32 roi_height

================================================================================
MSG: vision_msgs/Rightgoalpost
bool found
int32 x
int32 y
int32 roi_width
int32 roi_height
"""
  __slots__ = ['searching','fps','ball','leftgoalpost','rightgoalpost']
  _slot_types = ['bool','uint8','vision_msgs/Ball','vision_msgs/Leftgoalpost','vision_msgs/Rightgoalpost']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       searching,fps,ball,leftgoalpost,rightgoalpost

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Webotsmsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.searching is None:
        self.searching = False
      if self.fps is None:
        self.fps = 0
      if self.ball is None:
        self.ball = vision_msgs.msg.Ball()
      if self.leftgoalpost is None:
        self.leftgoalpost = vision_msgs.msg.Leftgoalpost()
      if self.rightgoalpost is None:
        self.rightgoalpost = vision_msgs.msg.Rightgoalpost()
    else:
      self.searching = False
      self.fps = 0
      self.ball = vision_msgs.msg.Ball()
      self.leftgoalpost = vision_msgs.msg.Leftgoalpost()
      self.rightgoalpost = vision_msgs.msg.Rightgoalpost()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B4iB4iB4i().pack(_x.searching, _x.fps, _x.ball.found, _x.ball.x, _x.ball.y, _x.ball.roi_width, _x.ball.roi_height, _x.leftgoalpost.found, _x.leftgoalpost.x, _x.leftgoalpost.y, _x.leftgoalpost.roi_width, _x.leftgoalpost.roi_height, _x.rightgoalpost.found, _x.rightgoalpost.x, _x.rightgoalpost.y, _x.rightgoalpost.roi_width, _x.rightgoalpost.roi_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ball is None:
        self.ball = vision_msgs.msg.Ball()
      if self.leftgoalpost is None:
        self.leftgoalpost = vision_msgs.msg.Leftgoalpost()
      if self.rightgoalpost is None:
        self.rightgoalpost = vision_msgs.msg.Rightgoalpost()
      end = 0
      _x = self
      start = end
      end += 53
      (_x.searching, _x.fps, _x.ball.found, _x.ball.x, _x.ball.y, _x.ball.roi_width, _x.ball.roi_height, _x.leftgoalpost.found, _x.leftgoalpost.x, _x.leftgoalpost.y, _x.leftgoalpost.roi_width, _x.leftgoalpost.roi_height, _x.rightgoalpost.found, _x.rightgoalpost.x, _x.rightgoalpost.y, _x.rightgoalpost.roi_width, _x.rightgoalpost.roi_height,) = _get_struct_3B4iB4iB4i().unpack(str[start:end])
      self.searching = bool(self.searching)
      self.ball.found = bool(self.ball.found)
      self.leftgoalpost.found = bool(self.leftgoalpost.found)
      self.rightgoalpost.found = bool(self.rightgoalpost.found)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B4iB4iB4i().pack(_x.searching, _x.fps, _x.ball.found, _x.ball.x, _x.ball.y, _x.ball.roi_width, _x.ball.roi_height, _x.leftgoalpost.found, _x.leftgoalpost.x, _x.leftgoalpost.y, _x.leftgoalpost.roi_width, _x.leftgoalpost.roi_height, _x.rightgoalpost.found, _x.rightgoalpost.x, _x.rightgoalpost.y, _x.rightgoalpost.roi_width, _x.rightgoalpost.roi_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ball is None:
        self.ball = vision_msgs.msg.Ball()
      if self.leftgoalpost is None:
        self.leftgoalpost = vision_msgs.msg.Leftgoalpost()
      if self.rightgoalpost is None:
        self.rightgoalpost = vision_msgs.msg.Rightgoalpost()
      end = 0
      _x = self
      start = end
      end += 53
      (_x.searching, _x.fps, _x.ball.found, _x.ball.x, _x.ball.y, _x.ball.roi_width, _x.ball.roi_height, _x.leftgoalpost.found, _x.leftgoalpost.x, _x.leftgoalpost.y, _x.leftgoalpost.roi_width, _x.leftgoalpost.roi_height, _x.rightgoalpost.found, _x.rightgoalpost.x, _x.rightgoalpost.y, _x.rightgoalpost.roi_width, _x.rightgoalpost.roi_height,) = _get_struct_3B4iB4iB4i().unpack(str[start:end])
      self.searching = bool(self.searching)
      self.ball.found = bool(self.ball.found)
      self.leftgoalpost.found = bool(self.leftgoalpost.found)
      self.rightgoalpost.found = bool(self.rightgoalpost.found)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B4iB4iB4i = None
def _get_struct_3B4iB4iB4i():
    global _struct_3B4iB4iB4i
    if _struct_3B4iB4iB4i is None:
        _struct_3B4iB4iB4i = struct.Struct("<3B4iB4iB4i")
    return _struct_3B4iB4iB4i
