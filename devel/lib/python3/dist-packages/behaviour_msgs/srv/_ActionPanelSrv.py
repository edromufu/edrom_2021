# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from behaviour_msgs/ActionPanelSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import behaviour_msgs.msg

class ActionPanelSrvRequest(genpy.Message):
  _md5sum = "c602a34772abebfb14617e6bc6021cd0"
  _type = "behaviour_msgs/ActionPanelSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """behaviour_msgs/ActionMsg actions


================================================================================
MSG: behaviour_msgs/ActionMsg

bool ball_tracking
bool center_ball
bool align_body
bool walk
bool kick
int32 defend
bool squat
bool goal_tracking
"""
  __slots__ = ['actions']
  _slot_types = ['behaviour_msgs/ActionMsg']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       actions

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActionPanelSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.actions is None:
        self.actions = behaviour_msgs.msg.ActionMsg()
    else:
      self.actions = behaviour_msgs.msg.ActionMsg()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5Bi2B().pack(_x.actions.ball_tracking, _x.actions.center_ball, _x.actions.align_body, _x.actions.walk, _x.actions.kick, _x.actions.defend, _x.actions.squat, _x.actions.goal_tracking))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.actions is None:
        self.actions = behaviour_msgs.msg.ActionMsg()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.actions.ball_tracking, _x.actions.center_ball, _x.actions.align_body, _x.actions.walk, _x.actions.kick, _x.actions.defend, _x.actions.squat, _x.actions.goal_tracking,) = _get_struct_5Bi2B().unpack(str[start:end])
      self.actions.ball_tracking = bool(self.actions.ball_tracking)
      self.actions.center_ball = bool(self.actions.center_ball)
      self.actions.align_body = bool(self.actions.align_body)
      self.actions.walk = bool(self.actions.walk)
      self.actions.kick = bool(self.actions.kick)
      self.actions.squat = bool(self.actions.squat)
      self.actions.goal_tracking = bool(self.actions.goal_tracking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5Bi2B().pack(_x.actions.ball_tracking, _x.actions.center_ball, _x.actions.align_body, _x.actions.walk, _x.actions.kick, _x.actions.defend, _x.actions.squat, _x.actions.goal_tracking))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.actions is None:
        self.actions = behaviour_msgs.msg.ActionMsg()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.actions.ball_tracking, _x.actions.center_ball, _x.actions.align_body, _x.actions.walk, _x.actions.kick, _x.actions.defend, _x.actions.squat, _x.actions.goal_tracking,) = _get_struct_5Bi2B().unpack(str[start:end])
      self.actions.ball_tracking = bool(self.actions.ball_tracking)
      self.actions.center_ball = bool(self.actions.center_ball)
      self.actions.align_body = bool(self.actions.align_body)
      self.actions.walk = bool(self.actions.walk)
      self.actions.kick = bool(self.actions.kick)
      self.actions.squat = bool(self.actions.squat)
      self.actions.goal_tracking = bool(self.actions.goal_tracking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5Bi2B = None
def _get_struct_5Bi2B():
    global _struct_5Bi2B
    if _struct_5Bi2B is None:
        _struct_5Bi2B = struct.Struct("<5Bi2B")
    return _struct_5Bi2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from behaviour_msgs/ActionPanelSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ActionPanelSrvResponse(genpy.Message):
  _md5sum = "3a1255d4d998bd4d6585c64639b5ee9a"
  _type = "behaviour_msgs/ActionPanelSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool status

"""
  __slots__ = ['status']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActionPanelSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = False
    else:
      self.status = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      self.status = bool(self.status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      self.status = bool(self.status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ActionPanelSrv(object):
  _type          = 'behaviour_msgs/ActionPanelSrv'
  _md5sum = '08e9f2a38a830622970eb20f373e5093'
  _request_class  = ActionPanelSrvRequest
  _response_class = ActionPanelSrvResponse
