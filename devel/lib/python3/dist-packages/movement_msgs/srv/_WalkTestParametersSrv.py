# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/WalkTestParametersSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WalkTestParametersSrvRequest(genpy.Message):
  _md5sum = "35347b8ea32e09af44278723d78435c9"
  _type = "movement_msgs/WalkTestParametersSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string currentWalk
float64 stepGain
float64 lateralGain
float64 turnGain
float64 freq
float64 supportPhaseRatio
float64 footYOffset
float64 riseGain
float64 trunkZOffset
float64 swingGain
float64 swingRollGain
float64 swingPhase
float64 stepUpVel
float64 stepDownVel
float64 riseUpVel
float64 riseDownVel
float64 swingPause
float64 swingVel
float64 trunkXOffset
float64 trunkYOffset
float64 trunkPitch
float64 trunkRoll
float64 extraLeftX
float64 extraLeftY
float64 extraLeftZ
float64 extraRightX
float64 extraRightY
float64 extraRightZ
float64 extraLeftYaw
float64 extraLeftPitch
float64 extraLeftRoll
float64 extraRightYaw
float64 extraRightPitch
float64 extraRightRoll

"""
  __slots__ = ['currentWalk','stepGain','lateralGain','turnGain','freq','supportPhaseRatio','footYOffset','riseGain','trunkZOffset','swingGain','swingRollGain','swingPhase','stepUpVel','stepDownVel','riseUpVel','riseDownVel','swingPause','swingVel','trunkXOffset','trunkYOffset','trunkPitch','trunkRoll','extraLeftX','extraLeftY','extraLeftZ','extraRightX','extraRightY','extraRightZ','extraLeftYaw','extraLeftPitch','extraLeftRoll','extraRightYaw','extraRightPitch','extraRightRoll']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       currentWalk,stepGain,lateralGain,turnGain,freq,supportPhaseRatio,footYOffset,riseGain,trunkZOffset,swingGain,swingRollGain,swingPhase,stepUpVel,stepDownVel,riseUpVel,riseDownVel,swingPause,swingVel,trunkXOffset,trunkYOffset,trunkPitch,trunkRoll,extraLeftX,extraLeftY,extraLeftZ,extraRightX,extraRightY,extraRightZ,extraLeftYaw,extraLeftPitch,extraLeftRoll,extraRightYaw,extraRightPitch,extraRightRoll

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WalkTestParametersSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.currentWalk is None:
        self.currentWalk = ''
      if self.stepGain is None:
        self.stepGain = 0.
      if self.lateralGain is None:
        self.lateralGain = 0.
      if self.turnGain is None:
        self.turnGain = 0.
      if self.freq is None:
        self.freq = 0.
      if self.supportPhaseRatio is None:
        self.supportPhaseRatio = 0.
      if self.footYOffset is None:
        self.footYOffset = 0.
      if self.riseGain is None:
        self.riseGain = 0.
      if self.trunkZOffset is None:
        self.trunkZOffset = 0.
      if self.swingGain is None:
        self.swingGain = 0.
      if self.swingRollGain is None:
        self.swingRollGain = 0.
      if self.swingPhase is None:
        self.swingPhase = 0.
      if self.stepUpVel is None:
        self.stepUpVel = 0.
      if self.stepDownVel is None:
        self.stepDownVel = 0.
      if self.riseUpVel is None:
        self.riseUpVel = 0.
      if self.riseDownVel is None:
        self.riseDownVel = 0.
      if self.swingPause is None:
        self.swingPause = 0.
      if self.swingVel is None:
        self.swingVel = 0.
      if self.trunkXOffset is None:
        self.trunkXOffset = 0.
      if self.trunkYOffset is None:
        self.trunkYOffset = 0.
      if self.trunkPitch is None:
        self.trunkPitch = 0.
      if self.trunkRoll is None:
        self.trunkRoll = 0.
      if self.extraLeftX is None:
        self.extraLeftX = 0.
      if self.extraLeftY is None:
        self.extraLeftY = 0.
      if self.extraLeftZ is None:
        self.extraLeftZ = 0.
      if self.extraRightX is None:
        self.extraRightX = 0.
      if self.extraRightY is None:
        self.extraRightY = 0.
      if self.extraRightZ is None:
        self.extraRightZ = 0.
      if self.extraLeftYaw is None:
        self.extraLeftYaw = 0.
      if self.extraLeftPitch is None:
        self.extraLeftPitch = 0.
      if self.extraLeftRoll is None:
        self.extraLeftRoll = 0.
      if self.extraRightYaw is None:
        self.extraRightYaw = 0.
      if self.extraRightPitch is None:
        self.extraRightPitch = 0.
      if self.extraRightRoll is None:
        self.extraRightRoll = 0.
    else:
      self.currentWalk = ''
      self.stepGain = 0.
      self.lateralGain = 0.
      self.turnGain = 0.
      self.freq = 0.
      self.supportPhaseRatio = 0.
      self.footYOffset = 0.
      self.riseGain = 0.
      self.trunkZOffset = 0.
      self.swingGain = 0.
      self.swingRollGain = 0.
      self.swingPhase = 0.
      self.stepUpVel = 0.
      self.stepDownVel = 0.
      self.riseUpVel = 0.
      self.riseDownVel = 0.
      self.swingPause = 0.
      self.swingVel = 0.
      self.trunkXOffset = 0.
      self.trunkYOffset = 0.
      self.trunkPitch = 0.
      self.trunkRoll = 0.
      self.extraLeftX = 0.
      self.extraLeftY = 0.
      self.extraLeftZ = 0.
      self.extraRightX = 0.
      self.extraRightY = 0.
      self.extraRightZ = 0.
      self.extraLeftYaw = 0.
      self.extraLeftPitch = 0.
      self.extraLeftRoll = 0.
      self.extraRightYaw = 0.
      self.extraRightPitch = 0.
      self.extraRightRoll = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.currentWalk
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_33d().pack(_x.stepGain, _x.lateralGain, _x.turnGain, _x.freq, _x.supportPhaseRatio, _x.footYOffset, _x.riseGain, _x.trunkZOffset, _x.swingGain, _x.swingRollGain, _x.swingPhase, _x.stepUpVel, _x.stepDownVel, _x.riseUpVel, _x.riseDownVel, _x.swingPause, _x.swingVel, _x.trunkXOffset, _x.trunkYOffset, _x.trunkPitch, _x.trunkRoll, _x.extraLeftX, _x.extraLeftY, _x.extraLeftZ, _x.extraRightX, _x.extraRightY, _x.extraRightZ, _x.extraLeftYaw, _x.extraLeftPitch, _x.extraLeftRoll, _x.extraRightYaw, _x.extraRightPitch, _x.extraRightRoll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentWalk = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.currentWalk = str[start:end]
      _x = self
      start = end
      end += 264
      (_x.stepGain, _x.lateralGain, _x.turnGain, _x.freq, _x.supportPhaseRatio, _x.footYOffset, _x.riseGain, _x.trunkZOffset, _x.swingGain, _x.swingRollGain, _x.swingPhase, _x.stepUpVel, _x.stepDownVel, _x.riseUpVel, _x.riseDownVel, _x.swingPause, _x.swingVel, _x.trunkXOffset, _x.trunkYOffset, _x.trunkPitch, _x.trunkRoll, _x.extraLeftX, _x.extraLeftY, _x.extraLeftZ, _x.extraRightX, _x.extraRightY, _x.extraRightZ, _x.extraLeftYaw, _x.extraLeftPitch, _x.extraLeftRoll, _x.extraRightYaw, _x.extraRightPitch, _x.extraRightRoll,) = _get_struct_33d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.currentWalk
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_33d().pack(_x.stepGain, _x.lateralGain, _x.turnGain, _x.freq, _x.supportPhaseRatio, _x.footYOffset, _x.riseGain, _x.trunkZOffset, _x.swingGain, _x.swingRollGain, _x.swingPhase, _x.stepUpVel, _x.stepDownVel, _x.riseUpVel, _x.riseDownVel, _x.swingPause, _x.swingVel, _x.trunkXOffset, _x.trunkYOffset, _x.trunkPitch, _x.trunkRoll, _x.extraLeftX, _x.extraLeftY, _x.extraLeftZ, _x.extraRightX, _x.extraRightY, _x.extraRightZ, _x.extraLeftYaw, _x.extraLeftPitch, _x.extraLeftRoll, _x.extraRightYaw, _x.extraRightPitch, _x.extraRightRoll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.currentWalk = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.currentWalk = str[start:end]
      _x = self
      start = end
      end += 264
      (_x.stepGain, _x.lateralGain, _x.turnGain, _x.freq, _x.supportPhaseRatio, _x.footYOffset, _x.riseGain, _x.trunkZOffset, _x.swingGain, _x.swingRollGain, _x.swingPhase, _x.stepUpVel, _x.stepDownVel, _x.riseUpVel, _x.riseDownVel, _x.swingPause, _x.swingVel, _x.trunkXOffset, _x.trunkYOffset, _x.trunkPitch, _x.trunkRoll, _x.extraLeftX, _x.extraLeftY, _x.extraLeftZ, _x.extraRightX, _x.extraRightY, _x.extraRightZ, _x.extraLeftYaw, _x.extraLeftPitch, _x.extraLeftRoll, _x.extraRightYaw, _x.extraRightPitch, _x.extraRightRoll,) = _get_struct_33d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_33d = None
def _get_struct_33d():
    global _struct_33d
    if _struct_33d is None:
        _struct_33d = struct.Struct("<33d")
    return _struct_33d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/WalkTestParametersSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WalkTestParametersSrvResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "movement_msgs/WalkTestParametersSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WalkTestParametersSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class WalkTestParametersSrv(object):
  _type          = 'movement_msgs/WalkTestParametersSrv'
  _md5sum = '7113a794fe0bdf7ad1da5428852cd6a2'
  _request_class  = WalkTestParametersSrvRequest
  _response_class = WalkTestParametersSrvResponse
